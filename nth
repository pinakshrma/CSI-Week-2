class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None
   
    def append(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        current = self.head
        while current.next:
            current = current.next
        current.next = new_node

    def print_list(self):
        if not self.head:
            print("List is empty.")
            return
        current = self.head
        while current:
            print(current.data, end=" -> ")
            current = current.next
        print("None")

    def delete_nth_node(self, n):
        try:
            if not self.head:
                raise Exception("Cannot delete from an empty list.")
            if n <= 0:
                raise Exception("Index should be 1 or greater.")

            if n == 1:
                self.head = self.head.next
                return

            current = self.head
            for _ in range(n - 2):
                if not current.next:
                    raise Exception("Index out of range.")
                current = current.next

            if not current.next:
                raise Exception("Index out of range.")

            current.next = current.next.next
        except Exception as e:
            print(f"Error: {e}")

ll.append(10)
ll.append(20)
ll.append(30)
ll.append(40)

print("Original List:")
ll.print_list()

print("\nDeleting 3rd node:")
ll.delete_nth_node(3)
ll.print_list()

print("\nAttempt to delete 10th node:")
ll.delete_nth_node(10)

print("\nDeleting 1st node:")
ll.delete_nth_node(1)
ll.print_list()

ll.delete_nth_node(1)
ll.delete_nth_node(1)

print("\nAttempt to delete from empty list:")
ll.delete_nth_node(1)
